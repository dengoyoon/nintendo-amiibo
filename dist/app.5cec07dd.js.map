{"version":3,"sources":["src/core/router.ts","src/core/api.ts","src/core/view.ts","src/page/amiibo.ts","src/page/home.ts","src/app.ts"],"names":[],"mappings":";;;;;;AEAA,IAAA,IAAA;AAAA;AAAA,YAAA;AAMI,WAAA,IAAA,CAAY,WAAZ,EAAkC,QAAlC,EAAmD;AAAnD,QAAA,KAAA,GAAA,IAAA;;AGNJ,AHiBc,IGjBd,KHiBc,GGjBd,GAAA,IHiBc,GAAa,QGjB3B,CAAA,GHiB2B,IGjB3B,CAAA,eAAA,CAAA,CAAA;AHkBQ,UAAI,KAAI,CAAC,SAAT,EAAoB;AGjB5B,AHkBY,IGlBZ,IHkBY,IGlBZ,CHkBgB,CAAC,CGlBjB,QHkBY,CAAe,MGlB3B,CAAA,EHkBY,GAA2B,EGlBvC,CAAA,EHkB2C,CAAC,YGlB5C,CAAA,CAAA,AHkBY;AACA,QAAA,KAAI,CAAC,cAAL,GAAsB,KAAI,CAAC,QAA3B;AGlBZ,AHmBS,IGnBT,GHgBQ,GGhBR,GAAA,AHmBe,eGnBf,CAAA,OAAA,CAAA,aAAA,CAAA,CAAA,EAGA;AHiBY,QAAA,OAAO,CAAC,GAAR,CAAY,6BAAZ;AACH;AGjBT,AHkBK,IGlBC,CHWQ,KGXF,GAAG,IAAI,QAAA,CAAA,OAAJ,EAAf,EACA;;AACA,AHkBc,IGlBR,KHkBQ,GGlBA,GAAG,CHkBH,GGlBO,AHkBG,MGlBH,CAAA,GHkBI,IGlBR,CAAa,KHkBN,CGlBP,CAAjB,AHkB4C;AGjB5C,AHkBQ,IGlBF,EHkBE,KAAI,CAAC,EGlBG,GAAG,GHkBX,CGlBe,AHkBD,IAAd,CAAmB,GGlBJ,CAAA,MHkBf,CGlBW,CAAe,MAAf,CAAnB,EACA;AACA,ALRA,AEyBK,IFzBL,CEuBc,KFvBd;AAAA;AKUA,ALVA,AE2Bc,MGjBR,CAAC,EHiBO,GF3Bd,IE2Bc,GAAU,EGjBxB,CAAsB,QAAtB,CHiBwB,EGhBxB;ALPI,AEwBI,UAAM,CFxBV,MAAA,CEwBkB,EFxBlB,CEwBqB,KAAI,CAAC,QAAL,CAAc,IAAd,CAAmB,EAAnB,CAAjB;AGhBR,ALRI,MKQE,CAAC,CLRH,KAAA,GAAA,GKQJ,CAAoB,ALRhB,QKQJ,EAA8B,QAA9B;AACA,AHgBQ,MGhBF,AHgBE,CGhBD,IHgBK,CAAC,OGhBb,CAAoB,KHgBZ,KGhBR,EAAgC,UAAhC,GACA;ALJI,SAAA,cAAA,GAAiB,UAAC,IAAD,EAAY;AKMjC,ALLQ,AEmBA,MGdF,ALLE,CKKD,ILLK,CKKZ,ALLa,CEmBE,GGbf,KHaQ,GFnBA,GAAoB;AKO5B,ALNY,AEmBP,KAJS,GFfF,IAAI,EAAG,EADS;AKQ5B,ALNY,QAAA,IAAI,EAAG;AAFS,AEsBhB,OFtBJ,EEsBI,aAAA,GAAgB,YAAA;AFlBvB,AEmBG,KFxBJ,CEwBI,KAAI,CAAC,QAAL,GAAgB,EAAhB;AACH,KAFO;AFhBR,SAAA,YAAA,GAAe,UAAC,IAAD,EAAgB,IAAhB,EAA2B;AACtC,AEmBM,MFnBN,GEmBM,EFnBF,CAAC,UAAL,CAAgB,CEmBV,GFnBN,AEmBwB,CFnBH,SEmBI,GAAD,EAAe,KAAf,EAA6B;AFlBjD,AEmBJ,MAAA,EFnBI,GEmBA,CFnBI,AEmBH,EFnBG,IADa,QEoBrB,GAAsB,KAAI,CAAC,cAAL,CAAoB,OAApB,CAA4B,IAAA,MAAA,CAAI,GAAJ,CAA5B,EAAuC,KAAvC,CAAtB;AFlBI,AEmBP,KAFS,GFjBF,IAAI,EAAA;AAFa,AIrB7B,IAAA,GJqBQ,GIrBR,GAAA,eAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;AJyBK,AElBG,KFaJ,GEbU,gBAAgB,GAAG,QAAQ,CAAC,cAAT,CAAwB,WAAxB,CAAzB;AELR,IAAM,QAAQ,GAAG,8qCAAjB;AJyBI,AEnBI,QAAI,CFmBR,AEnBS,KFmBT,GAAQ,QEnBJ,EAAuB,EFmBnB;AElBA,AEoCZ,IAAA,QFpCkB,AEoClB,6BFpCY;AACH,AEmCT;AJjBQ,AIiBR,UJjBc,AIiBd,MAAA,EAAA,CJjBuB,GAAG,QAAQ,CAAC,IAA3B;AEjBA,AEkC8B,EAAA,OFlCzB,EEkCyB,CAAA,MFlC9B,EEkC8B,CFlCb,CEkCa,MAAA,CAAA,QFlC9B;AFkBA,AEjBA,SAAK,CFiBF,OEjBH,EFiBY,CEjBI,GFiBA,EAAb,GEjBH,CFiBsB,KAAI,CAAC,YAA3B,EAAyC;AACrC,AEjBJ,AEiCJ,QJhBQ,CEjBC,EEiCT,EJhBY,CAAC,KIgBb,CAAY,GFjCR,GFiBI,AEjBkB,CFiBA,IAAlB,AIgBR,CJhB+B,CIgBC,CFj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","file":"app.5cec07dd.js","sourceRoot":"..","sourcesContent":["import { RouteInfo } from \"../model/types\";\nimport View from \"./view\";\n\nexport default class Router {\n    private routeTable : RouteInfo[];\n    private defaultRoute : RouteInfo | null;\n\n    constructor() {\n        window.addEventListener('hashchange', this.route.bind(this));\n        this.routeTable = [];\n        this.defaultRoute = null;\n    }\n\n    setDefaultPage = (page : View) : void => {\n        this.defaultRoute = {\n            path : '',\n            page : page\n        }\n    }\n\n    addRoutePath = (path : string, page : View) : void => {\n        this.routeTable.push({\n            path,\n            page,\n        });\n    }\n\n    route = () : void => {\n        const routePath = location.hash;\n        if(routePath == '' && this.defaultRoute) {\n            this.defaultRoute.page.render();\n        }\n\n        for (const routeInfo of this.routeTable) {\n            if (routePath.indexOf(routeInfo.path) >= 0) {\n                routeInfo.page.render();\n                break;\n            }\n        }\n    }\n}","import { Amiibo, AmiiboResponse } from \"../model/types\";\n\nexport class Api {\n    url : string;\n\n    constructor(url : string) {\n        this.url = url;\n    }\n\n    protected async request<AjaxResponse>() : Promise<AjaxResponse> {\n        const response = await fetch(this.url)\n        return await response.json() as AjaxResponse;\n    }\n}\n\nexport class AmiiboListApi extends Api {\n    async getData() : Promise<AmiiboResponse> {\n        return this.request<AmiiboResponse>();\n    }\n}\n\n// export class Api {\n//     url;\n\n//     constructor(url) {\n//         this.url = url;\n//     }\n\n//     async request() {\n//         const response = await fetch(this.url);\n//         return await response.json();\n//     }\n// }","export default abstract class View {\n    private template : string;\n    private renderTemplate : string;\n    private container : HTMLElement;\n    private htmlList : string[];\n\n    constructor(containerId : string, template : string) {\n        const containerElement = document.getElementById(containerId);\n        if (!containerElement) {\n            throw \"최상위 컨테이너가 없어 UI를 진행하지 못합니다.\";\n        }\n        this.container = containerElement;\n        this.template = template;\n        this.renderTemplate = template;\n        this.htmlList = [];\n    }\n\n    protected updateView = () : void => {\n        if (this.container) {\n            this.container.innerHTML = this.renderTemplate;\n            this.renderTemplate = this.template;\n        } else {\n            console.log(\"최상위 컨테이너가 없어 UI를 진행하지 못합니다.\");\n        }\n    }\n\n    protected addHtml = (htmlString : string) : void => {\n        this.htmlList.push(htmlString);\n    }\n\n    protected getHtml = () : string => {\n        const snapshot = this.htmlList.join('')\n        this.clearHtmlList();\n        return snapshot;\n    }\n\n    private clearHtmlList = () : void => {\n        this.htmlList = [];\n    }\n\n    protected setTemplateData = (key : string, value : string) : void => {\n        this.renderTemplate = this.renderTemplate.replace(`@${key}`, value);\n    }\n\n    abstract render() : void;\n}","import { AmiiboListApi } from \"../core/api\";\nimport View from \"../core/view\";\nimport { Amiibo } from \"../model/types\";\n\nconst AMIIBO_URL = \"https://www.amiiboapi.com/api/amiibo/?gameseries=@game_series\"\n\nconst template = `\n    <div\n        class = \"container\">\n        @amiibo_list\n    </div>\n`;\n\nconst itemTemplate = `\n    <div\n        class = \"line-amiibo\">\n        <div\n            class = \"item-amiibo\">\n            <img\n                class = \"item-amiibo-img\"\n                src = \"@amiibo_img_left\"\n                alt = \"mario..\"/>\n            <div\n                class = \"item-amiibo-text\"\n                id = \"item-amiibo-text-head\">\n                    @amiibo_name_left\n            </div>\n            <div\n                class = \"item-amiibo-text\">\n                    @game_series_left\n            </div>\n            <div\n                class = \"item-amiibo-text\">\n                    @release_date_left\n            </div>\n        </div>\n        <div\n            class = \"item-amiibo\">\n            <img\n                class = \"item-amiibo-img\"\n                src = \"@amiibo_img_right\"\n                alt = \"mario..\"/>\n            <div\n                class = \"item-amiibo-text\"\n                id = \"item-amiibo-text-head\">\n                    @amiibo_name_right\n            </div>\n            <div\n                class = \"item-amiibo-text\">\n                    @game_series_right\n            </div>\n            <div\n                class = \"item-amiibo-text\">\n                    @release_date_right\n            </div>\n        </div>\n    </div>\n`;\n\nconst printHI = () : void => {\n    console.log(\"HIHI\");\n}\n\nexport default class AmiiboView extends View {\n    private _gameSeries : string;\n    private _amiibos : Amiibo[];\n\n    constructor(containerId : string) {\n        super(containerId, template);\n        this._gameSeries = \"\";\n        this._amiibos = [];\n    }\n\n    render = async () : Promise<void> => {\n        this.gameSeries = location.hash.slice(9);\n        const api = new AmiiboListApi(AMIIBO_URL.replace('@game_series', this.gameSeries));\n        this.amiibos = await (await api.getData()).amiibo;\n        \n        let tempItem = itemTemplate;\n        for (let i = 0 ; i < this.amiibos.length ; i ++) {\n            const { gameSeries, image, name, release } = this.amiibos[i];\n            if (i % 2 == 0) {\n                tempItem = tempItem.replace(\"@amiibo_img_left\", image);\n                tempItem = tempItem.replace(\"@amiibo_name_left\", name);\n                tempItem = tempItem.replace(\"@game_series_left\", gameSeries);\n                tempItem = tempItem.replace(\"@release_date_left\", release.jp);\n                if (i + 1 == this.amiibos.length) {\n                    // 눈속임용 ㅠㅠ\n                    tempItem = tempItem.replace(\"@amiibo_img_right\", \"https://upload.wikimedia.org/wikipedia/commons/thumb/7/70/Solid_white.svg/2048px-Solid_white.svg.png\");\n                    tempItem = tempItem.replace(\"@amiibo_name_right\", \"\");\n                    tempItem = tempItem.replace(\"@game_series_right\", \"\");\n                    tempItem = tempItem.replace(\"@release_date_right\", \"\");\n                    this.addHtml(tempItem);\n                }\n            } else {\n                tempItem = tempItem.replace(\"@amiibo_img_right\", image);\n                tempItem = tempItem.replace(\"@amiibo_name_right\", name);\n                tempItem = tempItem.replace(\"@game_series_right\", gameSeries);\n                tempItem = tempItem.replace(\"@release_date_right\", release.jp);\n                this.addHtml(tempItem);\n                tempItem = itemTemplate;\n            }\n            \n        }\n\n        this.setTemplateData('amiibo_list', this.getHtml());\n        this.updateView();\n\n        const aaa = document.querySelectorAll(\".item-amiibo\");\n        aaa.forEach((e, index) => {\n            if (e != null) {\n                e.addEventListener(\"click\", () => {\n                    console.log(e, index);\n                });\n            }\n        })\n    }\n\n    set gameSeries(series : string) {\n        switch(series) {\n            case \"mario\":\n                this._gameSeries = \"Super Mario\";\n                break;\n            case \"zelda\":\n                this._gameSeries = \"The Legend of Zelda\";\n                break;\n            case \"donkey\":\n                this._gameSeries = \"Donkey Kong\";\n                break;\n            case \"kirby\":\n                this._gameSeries = \"Kirby\";\n                break;\n            case \"pokemon\":\n                this._gameSeries = \"Pokemon\";\n                break;\n            case \"animal\":\n                this._gameSeries = \"Animal Crossing\";\n                break;\n            default:\n                break;\n        }\n    }\n\n    get gameSeries() : string {\n        return this._gameSeries;\n    }\n\n    set amiibos(array : Amiibo[]) {\n        this._amiibos = array;\n    }\n\n    get amiibos() : Amiibo[] {\n        return this._amiibos;\n    }\n}","import View from \"../core/view\";\n\nconst template = `\n    <div\n        class = \"container\">\n        <div\n            class = \"title\">nintendo amiibo</div>\n        <div>\n        <div\n            class = \"line-img\">\n            <a \n                class = \"img-home-box\"\n                id = \"img-mario\"\n                href=\"#/amiibo/mario\">\n            </a>\n            <a\n                class = \"img-home-box\"\n                id = \"img-zelda\"\n                href=\"#/amiibo/zelda\"></a>\n        </div>\n        <div\n            class = \"line-img\">\n            <a\n                class = \"img-home-box\"\n                id = \"img-donkey\"\n                href=\"#/amiibo/donkey\"></a>\n            <a\n                class = \"img-home-box\"\n                id = \"img-kirby\"\n                href=\"#/amiibo/kirby\"></a>\n        </div>\n        <div\n            class = \"line-img\">\n            <a\n                class = \"img-home-box\"\n                id = \"img-pokemon\"\n                href=\"#/amiibo/pokemon\"></a>\n            <a\n                class = \"img-home-box\"\n                id = \"img-animal\"\n                href=\"#/amiibo/animal\"></a>\n        </div>\n    </div>\n`;\n\nexport default class HomeView extends View {\n    constructor(containerId : string) {\n        super(containerId, template);\n    }\n\n    render = () : void => {\n        \n        this.updateView();\n    }\n}","import Router from \"./core/router\";\nimport AmiiboView from \"./page/amiibo\";\nimport HomeView from \"./page/home\";\n\n\n// 시작\nconst router = new Router();\n// Router의 생성자 실행 -> 해시 체인지 리스너 실행.\nconst homeView = new HomeView('root');\nconst amiiboView = new AmiiboView('root');\n// containerId인 root와 각 뷰에서 만든 템플릿을 View의 생성자에 전달\n// View의 생성자에서 이것들을 저장.\n\nrouter.setDefaultPage(homeView);\n// Router의 defaultRoute에 path ''와 view를 homeView로 설정\nrouter.addRoutePath(\"/home/\", homeView);\nrouter.addRoutePath(\"/amiibo/\", amiiboView);\n// routeTable에 각 path와 view등록\n\nrouter.route();\n// this.defaultRoute.page.render(); 실행\n// 즉 homeView의 render 실행\n// updateView실행 -> container인 root에 innerHTML로 저장되어어있는 템플릿 화면에 표시"]}